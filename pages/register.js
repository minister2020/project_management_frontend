import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import React from "react";
import { useEffect, useState, useRef } from "react";
import hidden from "../public/assets/Hiddenpassword.svg";
import show from "../public/assets/Showpassword.svg";
import {useForm} from "react-hook-form"
import { useFormik } from 'formik';

const initialValues = {
  firstName: '',
  lastName: '',
  email: '',
  password: '',
  phone: '',
  role: ''
}
const onSubmit = values => {
  console.log("form data", values)
 }
 const validate =values => {
  let errors = {}

  if(!values.firstName){
    errors.firstName = 'Required'
  }
  if(!values.lastName){
    errors.lastName = 'Required'
  }
  if(!values.phone){
    errors.phone = 'Required'
  }
  if(!values.email){
    errors.email = 'Required'
  }
  if(!values.password){
    errors.password = 'Required'
  } 
  if(!values.role){
    errors.role = 'required'
  }
    return errors
}
function Register() {

  const formik = useFormik({
    initialValues, 
    onSubmit:values => {
      submitData(values)
    } ,
    validate 
  });
  console.log("form errors", formik.errors)
  const firstNameRef = useRef();
  const lastNameRef = useRef();
  const emailRef = useRef();
  const passwordRef = useRef();
  const phoneRef = useRef();
  const roleRef = useRef();
  const router = useRouter()
  

  const [showPassword, setShowPassword] = useState(false);

  const [showPasswordTwo, setShowPasswordTwo] = useState(false);
  

  const getDevices = async (dataToCollect) => {
    const settings = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    
      body: JSON.stringify(dataToCollect),
    };

    console.log(JSON.stringify(dataToCollect));
    try {
      const fetchResponse = await fetch(
        "http://localhost:8082/api/auth/signup",
        settings
      );
      const data = await fetchResponse;
      alert("user registration was successful");
      router.push("/login")
      return data;
    } catch (e) {
      console.log(e, "error");
      return e;
    }
  };

  const submitData = (value) => {
    // e.preventDefault();
    
    const enteredFirstName = value.firstName;
    const enteredLastName = value.lastName
    const enteredEmail = value.email;
    const enteredPassword = value.password;
    const enteredPhone = value.phone;
    const enteredRole =value.role

    const dataToCollect = {
      firstName: enteredFirstName,
      lastName: enteredLastName,
      email: enteredEmail,
      password: enteredPassword,
      phone: enteredPhone,
      role: enteredRole,
    };

    getDevices(dataToCollect);
  };

  return (
    <div>
      <Head>
        <title>Project Management</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/assets/Project.svg" />
      </Head>

      <main className="font-Roboto bg-white flex flex-col justify-center items-center  h-screen 	border-radius: 0.5rem; ">
        <div className="flex flex-col bg-[#DCE4FF] justify-center px-[3rem] pb-[4rem]  drop-shadow-xl ">
          <p className="text-black text-[2rem] font-semibold mt-[2rem]  ">
            Register
          </p>

          <form className="flex flex-col text-black " onSubmit={formik.handleSubmit}>
            <input
              className="text-black text-[1.2rem] bg-[#DCE4FF] border-2 border-[#EAEFF2] w-[45rem]  pt-[1.4rem] pb-[2.2rem] pl-[1.9rem] mt-[0.1rem] "
              id="firstName"
              type="firstName"
              name="firstName"
              placeholder="First Name"
              onChange={formik.handleChange}
              value={formik.values.firstName}
              ref={firstNameRef}
            />
             {formik.errors.firstName ? <div>{formik.errors.firstName}</div> : null}
            <input
              className="text-black text-[1.2rem] bg-[#DCE4FF] border-2 border-[#EAEFF2] w-[45rem]  pt-[1.4rem] pb-[2.2rem] pl-[1.9rem] mt-[0.1rem] "
              id="lastName"
              type="lastName"
              name="lastName"
              placeholder="Last Name"
              onChange={formik.handleChange}
              value={formik.values.lastName}
              ref={lastNameRef}
            />
             {formik.errors.lastName ? <div>{formik.errors.lastName}</div> : null}
            <input
              className="text-black text-[1.2rem] bg-[#DCE4FF] border-2 border-[#EAEFF2] w-[45rem]  pt-[1.4rem] pb-[2.2rem] pl-[1.9rem] mt-[0.1rem] "
              id="phone"
              type="Phone"
              name="phone"
              placeholder="Phone"
              onChange={formik.handleChange}
              value={formik.values.phone}
              ref={phoneRef}
            />
             {formik.errors.phone ? <div>{formik.errors.phone}</div> : null}
            <input
              className="text-black text-[1.2rem] bg-[#DCE4FF] border-2 border-[#EAEFF2] w-[45rem]  pt-[1.4rem] pb-[2.2rem] pl-[1.9rem] mt-[0.1rem] "
              id="role"
              type="role"
              name="role"
              placeholder="Role"
              onChange={formik.handleChange}
              value={formik.values.role}
              ref={roleRef}
            />
              {formik.errors.role ? <div>{formik.errors.role}</div> : null}

          
          {/* <select name="role" 
            ref={({
              required: "select one option"
            })}>
            <option value=""></option>
            <option value="5">INTERN </option>
            <option value="6">STAFF</option>
       
          </select> */}
            
            <input
              className="text-black text-[1.2rem] bg-[#DCE4FF] border-2 border-[#EAEFF2] w-[45rem]  pt-[1.4rem] pb-[2.2rem] pl-[1.9rem] mt-[0.1rem] "
              id="email"
              name="email"
              placeholder="Email"
              onChange={formik.handleChange}
              value={formik.values.email}
              ref={emailRef}
            />
             {formik.errors.email ? <div>{formik.errors.email}</div> : null}

            <div className="flex items-center justify-between w-[45rem] border-2 border-[#EAEFF2] pt-[1rem] pb-[1.2rem] pl-[1.9rem] mt-[0.1rem] ">
              <input
                className="text-black text-[1.2rem] bg-[#DCE4FF] w-[45rem] pt-[1rem] pb-[1rem]"
                id="password"
                type={showPassword ? "text" : "Password"}
                name="password"
                placeholder="Password"
                onChange={formik.handleChange}
              value={formik.values.password}
                ref={passwordRef}
              />
               {formik.errors.password ? <div>{formik.errors.password}</div> : null}

              <span
                onClick={() => setShowPassword((showPassword) => !showPassword)}
                className="w-[3rem]  umr-[1rem] cursor-pointer"
              >
                {showPassword ? (
                  <Image src={hidden} alt="hidden" />
                ) : (
                  <Image src={show} alt="show" />
                )}
              </span>
            </div>

            {/* <Link href="/dashboard/dashboard"> */}
            <button
              className="text-white text-[2rem] font-medium bg-darkblue w-[45rem]  py-[1.4rem] mt-[0rem]"
              // onClick={submitData} 
              type="submit"
            >
              Sign up
            </button>
            {/* </Link> */}
          </form>
        </div>
        <p className="text-black text-[1.6rem] mt-[3rem]  mt-[0rem]">
          Already have an account?
          <span className="  text-[1.8rem] text-[#5790FF]">
          <Link href="/login"> Log in</Link>
          </span>
        </p>
      </main>
    </div>
  );
}

export default Register;
